#!/usr/bin/python

"""
DGEParser.py

Parse DGE files generated by Drop-seq experiment
(Accepts DGE matrix generated by Drop-seq_tools-1.12)

Assume rows are genes and columns are cells

Author : Sunghoon Heo

"""

import numpy as np

class DGELineRecord:
	def __init__(self, line,gene_label = None):
		if gene_label == None:
			self.proc_without_gene_label(line)
		else:
			self.proc_with_gene_label(line)
		self.exprs = []	
	def proc_without_gene_label(self, s):
		data = line.rstrip().split(s)
		self.cols = len(data)
		self.gene = None
		self.exprs = []
		for val in data[1:]:
			try:
				self.exprs.append(int(val))
			except ValueError:
				self.exprs.append(float(val))
				
	def proc_with_gene_label(self, s):
		data = line.rstrip().split(s)
		self.cols = len(data)
		self.gene = data[0]
		self.exprs = []
		for val in data:
			try:
				self.exprs.append(int(val))
			except ValueError:
				self.exprs.append(float(val))
			
			
class DGEParser:
	def __init__(self, dge_file, has_gene_label=True, \
		     has_cell_label_in_header=True, is_dropseq_file = True):
		self.dge_file_name = dge_file
		self.has_gene_label = has_gene_label
		self.has_cell_label_in_header = has_cell_label_in_header
		self.is_dropseq_file = is_dropseq_file
		self.cells = []
		self.data = {}
		self.fh = None
		self.rows = None
		self.cols = None
		self.init = False
		self.gene_to_row_id = {}
	def open(self):
		if self.init == False:
			self.fh = open(self.dge_file_name)
		
	def init(self):
		if self.is_dropseq_file:
			cells = self.fh.readline()[:-1].split()
			if "GENE" in cells:
				self.cells = cells[1:]
			else:
				self.cells = cells
		if self.has_cell_label_in_header:
			"""
			Assume file format as 
			CELL1 CELL2 CELL3 ...
			val1  val2  val3  ...
			"""
			self.cells = self.fh.readline()[:-1].split()
		
		for i, line in enumerate(self.fh):
			record = DGELineRecord(line, gene_label=self.has_gene_label)
			if record.gene == None:
				self.data[i] = record
				self.gene_to_row_id[i] = i
			else:
				self.data[record.gene] = record
				self.gene_to_row_id[record.gene] = i
		self.init = True
	def close(self):
		if self.init == True:
			self.fh.close()
		
	def convert_to_matrix(self):
		if self.init == False:
			self.open()
			self.init()
		mat = []
		rows = self.rows
		cols = self.cols
		init_rows = [0] * cols
		for _ in rows:
			mat.append([0] * rows)
		for gene_name in self.data:
			row_index = self.gene_to_row_id[gene_name]
			matrix_entry = self.data[gene_name].exprs
			mat[row_index] = matrix_entry
		return mat
	
	def get_gene_record(self ,gene_name):
		try:
			return self.data[gene_name]
		except KeyError:
			return None
	def get_gene_exprs(self ,gene):
		record = self.get_gene_record
		if record == None:
			return None
		retur record.exprs
	def mean_expr_gene(self ,gene_name):
		dat = self.get_gene_exprs(gene_name)
		if dat == None:
			return None
		return np.mean(dat)
	
	def std_expr_gene(self, gene):
		dat = self.get_gene_exprs(gene)
		if dat == None:
			return None
		retur np.std(dat)
		
	
